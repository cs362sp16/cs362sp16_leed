        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <time.h>
        -:    3:#include "dominion.h"
        -:    4:#include "rngs.h"
        -:    5:#define MAX_TESTS 2000
        -:    6:int fail = 0;
        -:    7:// return value check
        -:    8:int error1 = 0;
        -:    9:// deck count
        -:   10:int error2 = 0;
        -:   11:// discard count
        -:   12:int error3 = 0;
        -:   13:
     6000:   14:int assertTrue(int n){
     6000:   15:	if(n == 0){
      116:   16:		fail = 1;
      116:   17:		return 1;
        -:   18:	}
        -:   19:	else{
     5884:   20:		return 0;
        -:   21:	}
        -:   22:}
        -:   23:
        1:   24:void checkAsserts(){
        1:   25:	if(!fail){
    #####:   26:		printf("TEST SUCCESSFULLY COMPLETED\n");
        -:   27:	}
        -:   28:	else{
        1:   29:		if(error1 > 0){
    #####:   30:			printf("FAILED FUNCTION RETURN VALUE\n");
        -:   31:		}
        1:   32:		if(error2 > 0){
        1:   33:			printf("FAILED DECK COUNT\n");
        -:   34:		}
        1:   35:		if(error3 > 0){
        1:   36:			printf("FAILED DISCARD COUNT\n");
        -:   37:		}
        -:   38:	}
        1:   39:}
        -:   40:
     2000:   41:void checkAdventurerCard(struct gameState *g, int currentPlayer){
        -:   42:	int returnValue, preDiscardCount, preDeckCount;
        -:   43:
     2000:   44:	int preNumCards = numHandCards(g);
     2000:   45:	preDiscardCount = g->discardCount[currentPlayer];
     2000:   46:	preDeckCount = g->deckCount[currentPlayer];
        -:   47:
     2000:   48:	returnValue = adventurerCardEffect(g, currentPlayer);
        -:   49:
        -:   50:	// Test return value of function
     2000:   51:	if(assertTrue(!returnValue)){
    #####:   52:		error1++;
        -:   53:	}
        -:   54:
        -:   55:	// check that 2 cards were picked up
     2000:   56:	int postNumCards = numHandCards(g);
     2000:   57:	if(assertTrue(preNumCards+2 == postNumCards)){
       58:   58:		error2++;
        -:   59:	}
        -:   60:
     2000:   61:	int postDiscardCount = g->discardCount[currentPlayer];
     2000:   62:	int postDeckCount = preDeckCount - g->deckCount[currentPlayer] - 2;
        -:   63:
     2000:   64:	if(assertTrue(postDiscardCount == (preDiscardCount + postDeckCount))){
       58:   65:		error3++;
        -:   66:	}
     2000:   67:}
        -:   68:
        2:   69:int main(int argc, char *argv[]){
        2:   70:	int k[10] = {smithy,adventurer,gardens,embargo,cutpurse,mine,ambassador,outpost,baron,tribute};
        -:   71:	int i,j,n,p, players, seed;
        -:   72:	struct gameState g;
        2:   73:	if(argc < 2){
        1:   74:		printf("Enter seed number in command line\n");
        1:   75:		exit(0);
        -:   76:	}
        -:   77:
        -:   78:
        1:   79:	SelectStream(rand()%10 + 1);
        1:   80:	PutSeed((rand()%10) + 1);
        1:   81:	seed = rand()%10 + 1;
        1:   82:	printf("Tesing adventurer card\n");
        -:   83:
     2001:   84:	for(n = 0;n < MAX_TESTS; n++){
 52602000:   85:		for(i=0;i<sizeof(struct gameState);i++){
 52600000:   86:			((char*)&g)[i] = floor(Random() * 256);
        -:   87:		}
        -:   88:		// have 2-4 players
     2000:   89:		players = rand() %3 + 2;
        -:   90:
     2000:   91:		initializeGame(players, k, seed, &g);
        -:   92:
        -:   93:		// set up game state
     2000:   94:		p = rand() % players;
     2000:   95:		g.whoseTurn = p;
     2000:   96:		g.deckCount[p] = rand() % (MAX_DECK+1);
   494075:   97:		for(j=0;j<g.deckCount[p];j++){
   492075:   98:			g.deck[p][j] = rand() % treasure_map;
        -:   99:		}
     2000:  100:		g.discardCount[p] = floor(Random() * MAX_DECK);
     5715:  101:		for(j=0;j < g.handCount[p];j++){
     3715:  102:			g.discard[p][j] = rand() % treasure_map;
        -:  103:		}
     2000:  104:		g.handCount[p] = floor(Random() * MAX_HAND);
     2000:  105:		g.hand[p][0] = adventurer;
   396052:  106:		for(j=1;j < g.handCount[p];j++){
   394052:  107:			g.hand[p][j] = rand() % treasure_map;
        -:  108:		}
        -:  109:
     2000:  110:		checkAdventurerCard(&g,p);
        -:  111:
        -:  112:	}
        1:  113:	checkAsserts();
        1:  114:	printf("COMPLETED RANDOM TESTING\n");
        1:  115:	return 0;
        -:  116:}
