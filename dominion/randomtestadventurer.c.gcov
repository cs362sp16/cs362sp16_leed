        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <time.h>
        -:    3:#include "dominion.h"
        -:    4:#include "rngs.h"
        -:    5:#define MAX_TESTS 2000
        -:    6:int fail = 0;
        -:    7:// deck count
        -:    8:int error2 = 0;
        -:    9:// discard count
        -:   10:int error3 = 0;
        -:   11:
     6000:   12:int assertTrue(int n){
     6000:   13:	if(n == 0){
        6:   14:		fail = 1;
        6:   15:		return 1;
        -:   16:	}
        -:   17:	else{
     5994:   18:		return 0;
        -:   19:	}
        -:   20:}
        -:   21:
        1:   22:void checkAsserts(){
        1:   23:	if(!fail){
    #####:   24:		printf("TEST SUCCESSFULLY COMPLETED\n");
        -:   25:	}
        -:   26:	else{
        1:   27:		if(error2 > 0){
        1:   28:			printf("FAILED DECK COUNT: %d times\n",error2);
        -:   29:		}
        1:   30:		if(error3 > 0){
        1:   31:			printf("FAILED DISCARD COUNT: %d times\n",error3);
        -:   32:		}
        -:   33:	}
        1:   34:}
        -:   35:
     2000:   36:void checkAdventurerCard(struct gameState *g, int currentPlayer){
        -:   37:	int returnValue, preDiscardCount, preDeckCount;
        -:   38:
     2000:   39:	int preNumCards = numHandCards(g);
     2000:   40:	preDiscardCount = g->discardCount[currentPlayer];
     2000:   41:	preDeckCount = g->deckCount[currentPlayer];
        -:   42:
     2000:   43:	returnValue = adventurerCardEffect(g, currentPlayer);
        -:   44:
        -:   45:	// Test return value of function
     2000:   46:	assertTrue(!returnValue);
        -:   47:
        -:   48:	// check that 2 cards were picked up
     2000:   49:	int postNumCards = numHandCards(g);
     2000:   50:	if(assertTrue(preNumCards+2 == postNumCards)){
        3:   51:		error2++;
        -:   52:	}
        -:   53:
     2000:   54:	int postDiscardCount = g->discardCount[currentPlayer];
     2000:   55:	int postDeckCount = preDeckCount - g->deckCount[currentPlayer] - 2;
        -:   56:
     2000:   57:	if(assertTrue(postDiscardCount == (preDiscardCount + postDeckCount))){
        3:   58:		error3++;
        -:   59:	}
     2000:   60:}
        -:   61:
        2:   62:int main(int argc, char *argv[]){
        2:   63:	int k[10] = {smithy,adventurer,gardens,embargo,cutpurse,mine,ambassador,outpost,baron,tribute};
        -:   64:	int i,j,n,p, players, seed;
        -:   65:	struct gameState g;
        2:   66:	if(argc < 2){
        1:   67:		printf("Enter seed number in command line\n");
        1:   68:		exit(0);
        -:   69:	}
        -:   70:	else{
        1:   71:		seed = atoi(argv[1]);
        -:   72:	}
        -:   73:
        1:   74:	SelectStream(rand()%10 + 1);
        -:   75:	//seed = rand()%10 + 1;
        1:   76:	printf("Tesing adventurer card\n");
        -:   77:
     2001:   78:	for(n = 0;n < MAX_TESTS; n++){
 52602000:   79:		for(i=0;i<sizeof(struct gameState);i++){
 52600000:   80:			((char*)&g)[i] = floor(Random() * 256);
        -:   81:		}
        -:   82:		// have 2-4 players
     2000:   83:		players = rand() %3 + 2;
        -:   84:
     2000:   85:		initializeGame(players, k, seed, &g);
        -:   86:
        -:   87:		// set up game state
     2000:   88:		p = rand() % players;
     2000:   89:		g.whoseTurn = p;
     2000:   90:		g.deckCount[p] = rand() % (MAX_DECK+2);
        -:   91:
        -:   92:		// guarantee at least two treasure cards in deck
     2000:   93:		g.deck[p][0] = gold;
     2000:   94:		g.deck[p][1] = copper;
   507969:   95:		for(j=2;j<g.deckCount[p];j++){
   505969:   96:			g.deck[p][j] = rand() % treasure_map;
        -:   97:		}
     2000:   98:		g.discardCount[p] = floor(Random() * MAX_DECK);
     5470:   99:		for(j=0;j < g.handCount[p];j++){
     3470:  100:			g.discard[p][j] = rand() % treasure_map;
        -:  101:		}
     2000:  102:		g.handCount[p] = floor(Random() * MAX_HAND);
     2000:  103:		g.hand[p][0] = adventurer;
   696641:  104:		for(j=1;j < g.handCount[p];j++){
   694641:  105:			g.hand[p][j] = rand() % treasure_map;
        -:  106:		}
        -:  107:
     2000:  108:		checkAdventurerCard(&g,p);
        -:  109:
        -:  110:	}
        1:  111:	checkAsserts();
        1:  112:	printf("COMPLETED RANDOM TESTING\n");
        1:  113:	return 0;
        -:  114:}
