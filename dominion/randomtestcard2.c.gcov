        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <time.h>
        -:    3:#include "dominion.h"
        -:    4:#include "rngs.h"
        -:    5:#define MAX_TESTS 2000
        -:    6:int fail = 0;
        -:    7:
    24000:    8:void assertTrue(int n){
    24000:    9:	if(n == 0){
    12050:   10:		fail = 1;
        -:   11:	}
    24000:   12:}
        -:   13:
        3:   14:void checkAsserts(){
        3:   15:	if(fail){
        3:   16:		printf("FAILED TESTS DETECTED\n");
        -:   17:	}
        3:   18:}
        -:   19:
     6000:   20:void checkCouncilRoomCard(struct gameState *g, int currentPlayer){
        -:   21:	int returnValue, preDeckCount, preNumBuys, postNumBuys;
        -:   22:
     6000:   23:	int preNumCards = numHandCards(g);
     6000:   24:	preDeckCount = g->deckCount[currentPlayer];
     6000:   25:	preNumBuys = g->numBuys;
        -:   26:
     6000:   27:	returnValue = cardEffect(council_room,0,0,0,g,0,0);
        -:   28:
        -:   29:	// Test return value of function
     6000:   30:	assertTrue(!returnValue);
        -:   31:
        -:   32:	// check that 4 cards were picked up and smithy card was discarded
     6000:   33:	int postNumCards = numHandCards(g);
     6000:   34:	assertTrue(preNumCards+4 == postNumCards);
        -:   35:
     6000:   36:	int postDeckCount = g->deckCount[currentPlayer];
        -:   37:
        -:   38:	// check that 3 cards were removed from the deck
     6000:   39:	assertTrue(preDeckCount == (postDeckCount+4));
        -:   40:
     6000:   41:	postNumBuys = g->numBuys;
     6000:   42:	assertTrue(preNumBuys == (postNumBuys+1));
     6000:   43:}
        -:   44:
        6:   45:int main(int argc, char *argv[]){
        6:   46:	int k[10] = {smithy,adventurer,gardens,embargo,cutpurse,mine,ambassador,outpost,baron,tribute};
        -:   47:	int i,j,n,p, players, seed;
        -:   48:	struct gameState g;	
        6:   49:	if(argc < 2){
        3:   50:		printf("Enter seed number in command line\n");
        3:   51:		exit(0);
        -:   52:	}
        -:   53:
        3:   54:	SelectStream(rand()%10 + 1);
        3:   55:	seed = atoi(argv[1]);
        3:   56:	printf("RANDOM TESTING FOR COUNCIL ROOM CARD\n");
        -:   57:
     6003:   58:	for(n = 0;n < MAX_TESTS; n++){
157806000:   59:		for(i=0;i<sizeof(struct gameState);i++){
157800000:   60:			((char*)&g)[i] = floor(Random() * 256);
        -:   61:		}
        -:   62:		// have 2-4 players
     6000:   63:		players = rand() %3 + 2;
        -:   64:
     6000:   65:		initializeGame(players, k, seed, &g);
        -:   66:
        -:   67:		// set up game state
     6000:   68:		p = rand() % players;
     6000:   69:		g.whoseTurn = p;
        -:   70:
        -:   71:		//make at least 4 cards left in the user's deck
     6000:   72:		g.deckCount[p] = rand() % (MAX_DECK+4);
        -:   73:
        -:   74:		// fill deck randomly
  1505817:   75:		for(j=0;j<g.deckCount[p];j++){
  1499817:   76:			g.deck[p][j] = rand() % treasure_map;
        -:   77:		}
     6000:   78:		g.discardCount[p] = floor(Random() * MAX_DECK);
    16770:   79:		for(j=0;j < g.handCount[p];j++){
    10770:   80:			g.discard[p][j] = rand() % treasure_map;
        -:   81:		}
     6000:   82:		g.handCount[p] = floor(Random() * MAX_HAND);
        -:   83:
        -:   84:		// give smithy card
     6000:   85:		g.hand[p][0] = council_room;
  1663530:   86:		for(j=1;j < g.handCount[p];j++){
  1657530:   87:			g.hand[p][j] = rand() % treasure_map;
        -:   88:		}
        -:   89:
     6000:   90:		checkCouncilRoomCard(&g,p);
        -:   91:	}
        3:   92:	checkAsserts();
        3:   93:	printf("COMPLETED RANDOM TESTING\n");
        3:   94:	return 0;
        -:   95:}
        -:   96:
