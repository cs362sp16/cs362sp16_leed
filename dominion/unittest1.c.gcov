        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include "dominion.h"
        -:    3:
        -:    4:int fail = 0;
        -:    5:
        2:    6:void assertFalse(int n, char *msg){
        2:    7:	if(n != 0){
        2:    8:		printf("ASSERT FALSE PASSED: %s\n", msg);
        -:    9:	}
        2:   10:}
        -:   11:
        1:   12:void assertTrue(int n,char *msg){
        1:   13:	if(n != 0){
    #####:   14:		printf("FAILED ASSERT: %s\n", msg);
    #####:   15:		fail = 1;
        -:   16:	}
        1:   17:}
        -:   18:
        1:   19:void checkAsserts(){
        1:   20:	if(!fail){
        1:   21:		printf("TEST SUCCESSFULLY COMPLETED\n");
        -:   22:	}
        1:   23:}
        -:   24:// Unit test for initializeGame
        1:   25:int main(){
        -:   26:	struct gameState g;
        -:   27:	
        1:   28:	int k[10] = {smithy,adventurer,gardens,embargo,cutpurse,mine,ambassador,outpost,baron,tribute};
        1:   29:	int a = initializeGame(2, k, 4, &g);
        1:   30:	assertTrue(a, "Test for duplicates in kingdom cards in initializeGame()");
        -:   31:	
        1:   32:	int k2[10] = {smithy,smithy,gardens,embargo,cutpurse,mine,ambassador,outpost,baron,tribute};
        1:   33:	a = initializeGame(3, k2, 4, &g);
        1:   34:	assertFalse(a, "Duplicate card, should fail");
        -:   35:	
        1:   36:	a = initializeGame(20, k, 4, &g);
        1:   37:	assertFalse(a, "Test above max players allowed, should fail");
        -:   38:	
        1:   39:	checkAsserts();
        1:   40:	return 0;
        -:   41:}
