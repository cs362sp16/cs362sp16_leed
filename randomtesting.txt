Development of Random Testers
	For the randomtestadventurer tester, I was able to get at least a 98.28% coverage. Initially when I ran the test coverage, it was at around 90% coverage. In order to improve the coverage of the randomtestadventurer tester, I increased the amount of tests that runs through the code. This increased the test coverage so that I could tell that the tests generated covered several missed special cases. For example, I noticed that while I was generating a random deck size, it was possible for the user to have only 1 card left in their deck. The adventurer card requires at least 2 cards left in the user's deck, so this broke the code. I was able to find this error by increasing the amount of tests generated.
	For the randomtestcard1, which was testing the smithy card functionality, I was able to get 98% test coverage. This card was one of the cards that I wrote unit tests for in assignment 2. This card relatively simple to test and cover as the card only draws 3 cards and discards the smithy card. I was able to get 100% coverage on this card.  When I added more tests, I noticed that there were some errors with the number of cards the user was holding after the smithy card was played. There was not any code that I failed to cover as there was not many statements in the smithy function.
	Randomtestcard2 was testing the village room card. Initially, I was only able to get around 70% coverage, but was able to get 100%. The village card allows the player to draw one card from their deck and gain 2 actions. By default, the player always has only 1 action, so for the random test generator, the number of actions assigned to the random player will always be 1. The only issue with this function was an error that did not discard the card after it was played. Besides this issue, everything worked correctly.

Compare Coverage Between Unit Tests and Random Tests
	For the most part the random tests were more successful in obtaining the greater coverage percentage as it does run for a longer period of time. For example for the smithy card unit test, I was only able to get a 91.3% coverage, but for the random tester, I was able to get at least 98% coverage. The random tester was better at finding how severe the fault was as I was able to keep track of how many times the error occured. The random tester was had a better fault detection capability as there were more tests being run with random values being plugged in.
